// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import type * as apiTypes from './map-state.types';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "MapChipFloorType": {
            "type": "string",
            "enum": [
                "floor",
                "none"
            ]
        },
        "MapChipWallType": {
            "type": "string",
            "enum": [
                "wall",
                "door",
                "none"
            ]
        },
        "MapChipType": {
            "type": "object",
            "properties": {
                "floor": {
                    "$ref": "#/definitions/MapChipFloorType"
                },
                "walls": {
                    "type": "object",
                    "properties": {
                        "west": {
                            "$ref": "#/definitions/MapChipWallType"
                        },
                        "east": {
                            "$ref": "#/definitions/MapChipWallType"
                        },
                        "north": {
                            "$ref": "#/definitions/MapChipWallType"
                        },
                        "south": {
                            "$ref": "#/definitions/MapChipWallType"
                        }
                    },
                    "required": [
                        "west",
                        "east",
                        "north",
                        "south"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "floor",
                "walls"
            ],
            "additionalProperties": false
        },
        "MapStateType": {
            "type": "object",
            "properties": {
                "mapChipList": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/MapChipType"
                        }
                    }
                }
            },
            "required": [
                "mapChipList"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateMapChipFloorType(payload: unknown): apiTypes.MapChipFloorType {
  /** Schema is defined in {@link SCHEMA.definitions.MapChipFloorType } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/MapChipFloorType");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid MapChipFloorType: ' + ajv.errorsText(validator.errors, {dataVar: "MapChipFloorType"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isMapChipFloorType(payload: unknown): payload is apiTypes.MapChipFloorType {
  try {
    validateMapChipFloorType(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateMapChipWallType(payload: unknown): apiTypes.MapChipWallType {
  /** Schema is defined in {@link SCHEMA.definitions.MapChipWallType } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/MapChipWallType");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid MapChipWallType: ' + ajv.errorsText(validator.errors, {dataVar: "MapChipWallType"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isMapChipWallType(payload: unknown): payload is apiTypes.MapChipWallType {
  try {
    validateMapChipWallType(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateMapChipType(payload: unknown): apiTypes.MapChipType {
  /** Schema is defined in {@link SCHEMA.definitions.MapChipType } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/MapChipType");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid MapChipType: ' + ajv.errorsText(validator.errors, {dataVar: "MapChipType"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isMapChipType(payload: unknown): payload is apiTypes.MapChipType {
  try {
    validateMapChipType(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validateMapStateType(payload: unknown): apiTypes.MapStateType {
  /** Schema is defined in {@link SCHEMA.definitions.MapStateType } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/MapStateType");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid MapStateType: ' + ajv.errorsText(validator.errors, {dataVar: "MapStateType"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isMapStateType(payload: unknown): payload is apiTypes.MapStateType {
  try {
    validateMapStateType(payload);
    return true;
  } catch (error) {
    return false;
  }
}
